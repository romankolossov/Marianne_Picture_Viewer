# https://realm.github.io/SwiftLint/rule-directory.html
disabled_rules: # rule identifiers turned on by default to exclude from running

opt_in_rules: # some rules are turned off by default, so you need to opt-in
  - empty_count # Prefer checking isEmpty over comparing count to zero.
  - empty_string # Prefer checking isEmpty over comparing string to an empty string literal.
  - force_unwrapping # Force unwrapping should be avoided.
  - implicitly_unwrapped_optional # Implicitly unwrapped optionals should be avoided when possible.
  - fallthrough # Fallthrough should be avoided.
  - convenience_type # Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation.
  - fatal_error_message # A fatalError call should have a message.
  - first_where # Prefer using .first(where:) over .filter { }.first in collections.
  - last_where # Prefer using .last(where:) over .filter { }.last in collections.
  - modifier_order # Modifier order should be consistent.
  - toggle_bool # Prefer someBool.toggle() over someBool = !someBool.
  - identical_operands # Comparing two identical operands is likely a mistake.
  - unavailable_function # Unimplemented functions should be marked as unavailable.
  - overridden_super_call # Some overridden methods should always call super.
  - prohibited_super_call # Some methods should not call super
  - unowned_variable_capture # Prefer capturing references as weak to avoid potential crashes.
  - xct_specific_matcher # Prefer specific XCTest matchers over XCTAssertEqual and XCTAssertNotEqual
  - empty_xctest_method # Empty XCTest method should be avoided.
  - yoda_condition # The variable should be placed on the left, the constant on the right of a comparison operator.
  - trailing_closure # Trailing closure syntax should be used whenever possible.
  - switch_case_on_newline # Cases inside a switch should always be on a newline
  - redundant_type_annotation # Variables should not have redundant type annotation
  - pattern_matching_keywords # Combine multiple pattern matching bindings by moving keywords out of tuples.
  - operator_usage_whitespace # Operators should be surrounded by a single whitespace when they are being used.
  - multiline_parameters_brackets # Multiline parameters should have their surrounding brackets in a new line.
  - multiline_parameters # Functions and methods parameters should be either on the same line, or one per line.
  - multiline_literal_brackets # Multiline literals should have their surrounding brackets in a new line.
  - multiline_arguments # Arguments should be either on the same line, or one per line.
  - literal_expression_end_indentation # Array and dictionary literal end should have the same indentation as the line that started it.
  - implicit_return # Prefer implicit returns in closures, functions and getters.
  - contains_over_first_not_nil # Prefer contains over first(where:) != nil and firstIndex(where:) != nil.
  - contains_over_filter_is_empty # Prefer contains over using filter(where:).isEmpty
  - contains_over_filter_count # Prefer contains over comparing filter(where:).count to 0.
  - closure_spacing # Closure expressions should have a single space inside each brace.


warning_threshold: 15 # initially was set to 15

function_parameter_count: 8 # initially was set to 5

excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Pods
  - R.generated.swift
  - templates

line_length: 210

type_body_length:
  warning: 300
  error: 400

function_body_length:
  warning: 80 # initially was set to 50
  error: 100

file_length:
  warning: 500
  error: 1200

type_name:
  min_length: 3 # only warning
  max_length: # warning and error
    warning: 40
    error: 50

identifier_name:
  min_length: 1

custom_rules:
  nslocalizedstrings_alert:
    regex: "NSLocalizedString"
    name: "Localization Safety"
    message: "Use R.string.localizable instead."
  dateinterval_alert:
    regex: "DateInterval"
    name: "Time Travel Safety"
    message: "Don't use DateInterval. It causes EXC_BAD_INSTRUCTION if start/end are messed up."


